spring.application.name=User-Service

# Port in which you want to run your server.
server.port=6902

# Your jdbc::mysql://{mySqlIP}:{mySqlPORT}/{databaseName}?{extraParams}
spring.datasource.url=jdbc:mysql://localhost:3306/spring?serverTimezone=UTC&createDatabaseIfNotExist=true&useSSL=false
# Mysql Username
spring.datasource.name=hungerbox
# Mysql Password
spring.datasource.password=hungerbox

# Will be used to show database queries in the console
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
# This will check for changes and entities and will update accordingly in database as well.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.jpa.defer-datasource-initialization=true
# data.sql queries will be executed once the database is completely initialised.

# Credentials to login into spring boot login form which will be displayed at http://localhost:{portNumber}
# This is just a handling for spring boot security where you are supposed to log-in first with these credentials
# for calling apis.
spring.security.user.name=ankit
spring.security.user.password=qwerty123

# Redis configs
spring.data.redis.host=localhost
spring.data.redis.port=6379
# spring.data.redis.password=your_redis_password  # Optional

# IP and Port at which eureka server is running.
eureka.client.service-url.defaultZone=${EUREKA_SERVER_URL:http://localhost:5999/eureka/}

# Number of concurrent connections this service can hold i.e. number of threads the thread pool will have.
server.tomcat.max-connections=201

# ----- Logging Configuration -----
# Logback will use logback-spring.xml by default if present, these are fallbacks or can be used by Spring's logging system itself
logging.level.root=INFO
# Adjust your package name
# Example: Set your base package to DEBUG if needed
logging.level.com.example.userService=DEBUG
logging.file.name=logs/app.log

# ----- Kafka Configuration -----
spring.kafka.bootstrap-servers=localhost:9092
# Use StringSerializer for log messages unless you plan structured JSON logging immediately
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Optional: Add properties like retries, acks, etc.
# spring.kafka.producer.acks=all
# spring.kafka.producer.retries=3

# ----- Custom Logging Properties -----
logging.kafka.topic=user-service-logs